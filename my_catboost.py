# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eZxVK5Wkjk0eedLlELVzOiTbWGevjy8H
"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.base import BaseEstimator
from sklearn.model_selection import GridSearchCV
import numpy as np
import pandas as pd

class GradientBoosting(BaseEstimator):  # BaseEstimator для совместимости с scikit-learn
    def __init__(self, n_estimators=100, learning_rate=0.1, max_depth=3):
        self.n_estimators = n_estimators
        self.learning_rate = learning_rate
        self.max_depth = max_depth
        self.models = []

    def fit(self, X, y):
        y_pred = np.zeros_like(y, dtype=np.float64)

        for _ in range(self.n_estimators):
            residuals = y - y_pred

            model = DecisionTreeRegressor(max_depth=self.max_depth)
            model.fit(X, residuals)

            self.models.append(model)
            y_pred += self.learning_rate * model.predict(X)

    def predict(self, X):
        y_pred = np.zeros(X.shape[0])
        for model in self.models:
            y_pred += self.learning_rate * model.predict(X)
        return y_pred

    def get_params(self, deep=True):
        return {
            'n_estimators': self.n_estimators,
            'learning_rate': self.learning_rate,
            'max_depth': self.max_depth
        }

    def set_params(self, **params):
        for key, value in params.items():
            setattr(self, key, value)
        return self