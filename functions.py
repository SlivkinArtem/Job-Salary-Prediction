# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eZxVK5Wkjk0eedLlELVzOiTbWGevjy8H
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error
from my_catboost import GradientBoosting

def in_(sub_strs, str_):
  for sub_str in sub_strs:
    if sub_str.lower() in str_.lower():
      return True
  return False

def flatten_series(nestered_series):
  flat_list = []
  for element in nestered_series:
    if isinstance(element, list):
      flat_list.extend(flatten_series(element))
    else:
      flat_list.append(element)
  return pd.Series(flat_list)

def train_with_depth_variation(X_train, y_train, depths, n_estimators=100, learning_rate=0.05):
    final_errors = {}

    for depth in depths:
        model = GradientBoosting(n_estimators=n_estimators, learning_rate=learning_rate, max_depth=depth)
        y_pred = np.zeros_like(y_train, dtype=np.float64)  # Инициализация начального предсказания

        for i in range(model.n_estimators):
            residuals = y_train - y_pred
            tree = DecisionTreeRegressor(max_depth=depth)
            tree.fit(X_train, residuals)

            y_pred += learning_rate * tree.predict(X_train)

        final_errors[depth] = mean_absolute_error(y_train, y_pred)

    return final_errors


def align_columns(train, test):
  missing_cols = set(train.columns) - set(test.columns)
  for col in missing_cols:
    test[col] = 0

  test = test[train.columns]
  return test